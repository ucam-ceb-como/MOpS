/*
  Author(s):      Matthew Celnik (msc37)
  Project:        sweep (population balance solver)
  Sourceforge:    http://sourceforge.net/projects/mopssuite

  Copyright (C) 2008 Matthew S Celnik.

  File purpose:
    The ModelStats class is the base class for the vital statistics
    generated by particle models.  Vital stats are a subset of information
    about a particle ensemble that are useful as outputs, but cannot
    be used to reconstruct the ensemble.  Serialization should be used
    for that.

  Licence:
    This file is part of "sweepc".

    sweepc is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

  Contact:
    Dr Markus Kraft
    Dept of Chemical Engineering
    University of Cambridge
    New Museums Site
    Pembroke Street
    Cambridge
    CB2 3RA
    UK

    Email:       mk306@cam.ac.uk
    Website:     http://como.cheng.cam.ac.uk
*/

#ifndef SWEEP_MODELSTATS_H
#define SWEEP_MODELSTATS_H

#include "swp_params.h"
#include "swp_property_indices.h"

#include <vector>
#include <string>
#include <iostream>
#include <limits>

namespace Sweep
{
    // Forward declarations
    class Particle;
    class ParticleModel;
    class Ensemble;

namespace Stats
{
class IModelStats
{
public:
    // Virtual destructor.
    virtual ~IModelStats() {};

    // Returns the number of stats for this model.
    virtual unsigned int Count(void) const = 0;

    // Calculates the model stats for a particle ensemble.
    virtual void Calculate(
        const Ensemble &e, // Ensemble from which to get stats.
        double scale         // Scaling factor to unit volume (summed stats).
        ) = 0;

    // Returns a vector containing the stats.
    virtual const fvector &Get(void) const = 0;

    // Returns a vector containing the stats.
    virtual void Get(
        fvector &stats,        // Output vector.
        unsigned int start = 0 // Optional start index for the first stat.
        ) const = 0;

    // Returns a vector containing the stat names.
    virtual const std::vector<std::string> &Names(void) const = 0;

    // Adds to a vector containing stat names.
    virtual void Names(
        std::vector<std::string> &names, // Output vector.
        unsigned int start = 0           // Optional start index for the first stat.
        ) const = 0;


    // PARTICLE SIZE LISTS.

    // Returns the number of PSL output variables.
    virtual unsigned int PSL_Count(void) const = 0;

    // Returns a vector of PSL variable names.
    virtual void PSL_Names(
        std::vector<std::string> &names, // Vector in which to return names.
        unsigned int start = 0 // Optional start index for the first name.
        ) const = 0;

    //! Build the PSL entry for the given particle.
    virtual void PSL(
        const Sweep::Particle &sp, // Particle from which to get PSL data.
        double time,                      // Current flow time (used to calculate particle age).
        fvector &psl,                   // Output vector.
        unsigned int start = 0          // Optional start index for the first variable.
        ) const = 0;

	//! Get primary particle details and connectivity
	virtual void PrintPrimary(const Sweep::Particle &sp, std::vector<fvector> &surface, std::vector<fvector> &primary_diameter, int k) const = 0;

    // READ/WRITE/COPY.

    // Creates a copy of the object.
    virtual IModelStats *const Clone(void) const = 0;

    // Returns the model data type.  Used to identify different models
    // and for serialisation.
    virtual unsigned int ID(void) const = 0;

    // Writes the object to a binary stream.
    virtual void Serialize(std::ostream &out) const = 0;

    // Reads the object from a binary stream.
    virtual void Deserialize(
        std::istream &in,                 // Input stream.
        const Sweep::ParticleModel &model // Defining particle model.
        ) = 0;

    // Statistical Boundaries. Properties outside this range will not be
    // included in Statistical Calculations.
    struct StatBound {
        double Lower;
        double Upper;
        Sweep::PropID PID;

        //! Default to something that should accept all particles
        StatBound() : Lower(0.0), Upper(std::numeric_limits<double>::max()), PID(Sweep::iDcol) {}
    };
    // Set statbound to this abstract class
    void SetStatBoundary(const StatBound &sb) { m_statbound = sb; }

protected:
    enum StatType {
        None=-1,
        Sum, // Just sum up this stat.
        Avg  // Just average this stat.
    };

    StatBound m_statbound;
};

};
}

#endif
